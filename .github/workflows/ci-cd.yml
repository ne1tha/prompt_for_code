name: CI/CD Pipeline for Knowledge Platform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  #---------------------------------------
  # Job 1: Backend (Python/FastAPI) CI
  #---------------------------------------
  backend-ci:
    runs-on: ubuntu-latest
    steps:
    - name: 1. Checkout code
      uses: actions/checkout@v4

    - name: 2. Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: requirements.txt #

    - name: 3. Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt #

    # - name: 4. Lint with Flake8 (代码风格检查)
    #   run: |
    #     pip install flake8
    #     flake8 app/ #

    - name: 5. Test with Pytest (单元/集成测试)
      run: |
        pip install pytest
        # 你需要创建 pytest 测试文件 (例如在 app/tests/ 目录下)
        pytest

  #---------------------------------------
  # Job 2: Frontend (Vue.js) CI 
  #---------------------------------------
  frontend-ci:
    runs-on: ubuntu-latest
    
    # !! 关键修正：为所有 run 命令设置默认工作目录
    defaults:
      run:
        working-directory: ./vue-knowledge-base #

    steps:
    - name: 1. Checkout code
      uses: actions/checkout@v4

    - name: 2. Set up Node.js (e.g., v20)
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

        cache-dependency-path: vue-knowledge-base/package-lock.json 

    - name: 3. Install npm dependencies
      run: npm install 

    # - name: 4. Lint with ESLint (代码风格检查)
    #   run: npm run lint --if-present 

    - name: 5. Build frontend (构建生产版本)
      run: npm run build --if-present 

  #---------------------------------------
  #  Job 3: Build Docker Images (CD)
  #---------------------------------------
  build-docker:
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci] 

    steps:
    - name: 1. Checkout code
      uses: actions/checkout@v4
      
    - name: 2. Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: 3. Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 4. Log in to GitHub Container Registry (ghcr.io)
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 5. Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend  
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/knowledge-platform-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 6. Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend 
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/knowledge-platform-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max